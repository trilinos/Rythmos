#
# FRAMEWORK group
#

# This is how to test with SERIAL and MPI
# 09/01/05 tscoffe:  MPI runs are not ready yet.
#(FRAMEWORK,INSTALL) {
#    TESTS = ../example/basicExample/basicExample.exe;
#    COMM = SERIAL, MPI;
#}

# Default run, Explicit Runge-Kutta 4 stage
(FRAMEWORK,INSTALL) {
    TESTS = ../example/basicExample/basicExample.exe;
    ARGS = --verbose;
    COMM = SERIAL;
}

# Scalar Forward Euler
(FRAMEWORK,INSTALL) {
    TESTS = ../example/basicExample/basicExample.exe;
    ARGS = --method=FE --maxerror=1e-1 --verbose;
    COMM = SERIAL;
}

# Scalar Backward Euler
(FRAMEWORK,INSTALL) {
    TESTS = ../example/basicExample/basicExample.exe;
    ARGS = --method=BE --maxerror=1e-1 --verbose;
    COMM = SERIAL;
}

# Vector Explicit Runge-Kutta 4 stage
(FRAMEWORK,INSTALL) {
    TESTS = ../example/basicExample/basicExample.exe;
    ARGS = --numelements=10 --verbose;
    COMM = SERIAL;
}

# Vector Forward Euler
(FRAMEWORK,INSTALL) {
    TESTS = ../example/basicExample/basicExample.exe;
    ARGS = --method=FE --maxerror=1e-1 --numelements=10 --verbose;
    COMM = SERIAL;
}

# Vector Backward Euler
(FRAMEWORK,INSTALL) {
    TESTS = ../example/basicExample/basicExample.exe;
    ARGS = --method=BE --maxerror=1e-1 --numelements=10 --verbose;
    COMM = SERIAL;
}

# Scalar Backward Euler using Amesos
(FRAMEWORK,INSTALL) {
    TESTS = ../example/basicExample/basicExample.exe;
    ARGS = --method=BE --maxerror=1e-1 --numelements=1 --verbose --extra-linear-solver-params="<ParameterList><Parameter name=\"Linear Solver Type\" type=\"string\" value=\"Amesos\"/></ParameterList>" --linear-solver-params-used-file=lowsf.amesos.used.xml;
    COMM = SERIAL;
}

# Scalar Backward Euler using AztecOO
(FRAMEWORK,INSTALL) {
    TESTS = ../example/basicExample/basicExample.exe;
    ARGS = --method=BE --maxerror=1e-1 --numelements=1 --verbose --extra-linear-solver-params="<ParameterList><Parameter name=\"Linear Solver Type\" type=\"string\" value=\"AztecOO\"/><ParameterList name =\"Linear Solver Types\"><ParameterList name=\"AztecOO\"><ParameterList name=\"Forward Solve\"><Parameter name=\"Tolerance\" type=\"double\" value=\"1e-12\"/></ParameterList></ParameterList></ParameterList></ParameterList>" --linear-solver-params-used-file=lowsf.aztecoo.used.xml;
    COMM = SERIAL;
}

# Vector Backward Euler using Amesos
(FRAMEWORK,INSTALL) {
    TESTS = ../example/basicExample/basicExample.exe;
    ARGS = --method=BE --maxerror=1e-1 --numelements=10 --verbose --extra-linear-solver-params="<ParameterList><Parameter name=\"Linear Solver Type\" type=\"string\" value=\"Amesos\"/></ParameterList>" --linear-solver-params-used-file=lowsf.amesos.used.xml;
    COMM = SERIAL;
}

# Vector Backward Euler using AztecOO
(FRAMEWORK,INSTALL) {
    TESTS = ../example/basicExample/basicExample.exe;
    ARGS = --method=BE --maxerror=1e-1 --numelements=10 --verbose --extra-linear-solver-params="<ParameterList><Parameter name=\"Linear Solver Type\" type=\"string\" value=\"AztecOO\"/><ParameterList name =\"Linear Solver Types\"><ParameterList name=\"AztecOO\"><ParameterList name=\"Forward Solve\"><Parameter name=\"Tolerance\" type=\"double\" value=\"1e-12\"/></ParameterList></ParameterList></ParameterList></ParameterList>" --linear-solver-params-used-file=lowsf.aztecoo.used.xml;
    COMM = SERIAL;
}

# Vector Forward Euler with same accuracy as ERK
(FRAMEWORK,INSTALL) {
    TESTS = ../example/basicExample/basicExample.exe;
    ARGS = --numelements=10 --method=FE --T=0.1 --numsteps=5000 --verbose;
    COMM = SERIAL;
}

# Vector Backward Euler with same accuracy as ERK
(FRAMEWORK,INSTALL) {
    TESTS = ../example/basicExample/basicExample.exe;
    ARGS = --numelements=10 --method=BE --T=0.1 --numsteps=5000 --verbose;
    COMM = SERIAL;
}

# Vector 1DfemTransient with Backward Euler 
(FRAMEWORK,INSTALL) {
    TESTS = ../example/epetra/1Dfem/1DfemTransient.exe;
    ARGS = --verbose;
    COMM = SERIAL;
}

# Vector 1DfemTransient with ImplicitBDF
(FRAMEWORK,INSTALL) {
    TESTS = ../example/epetra/1Dfem/1DfemTransient.exe;
    ARGS = --verbose --method=BDF;
    COMM = SERIAL;
}

